AWSTemplateFormatVersion: 2010-09-09
Description: 'Step 5: create Load Balancer, Auto Scaling, SNS, and CloudWatch'

#################################################################################
### Conditions
#################################################################################
Conditions:
  InUsEast1: !Equals
    - !Ref 'AWS::Region'
    - us-east-1

#################################################################################
### Parameters
#################################################################################
Parameters:

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  AglWebInstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small
    Description: Web EC2 instance type

  AglAppInstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small
    Description: App EC2 instance type

  AglInstanceKey:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Default: vockey

#################################################################################
### Resources
#################################################################################
Resources:

#--------------------------------------------------------------------------------
#------ auto scaling and load balancer for AnyGroupLLC frontend web

  # Web Load Balancer
  AglWebLb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !ImportValue AglPubNet1Id
        - !ImportValue AglPubNet2Id
      SecurityGroups:
        - !ImportValue AglWebLbSgId
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: AnyGroupLLC Web LoadBalancer

  # Target Group for the Web Load Balancer: port 80
  AglWebLbTg:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue AglVpcId
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30

  # Target Group for the Web Load Balancer: port 8080
  AglWebLb8080Tg:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue AglVpcId
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /api/health
      HealthCheckIntervalSeconds: 30

  # Listener 80 for the Web Load Balancer
  AglWebLbl:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AglWebLb
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AglWebLbTg

  # Listener 8080 for the Web Load Balancer
  AglWebLbl8080:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AglWebLb
      Protocol: HTTP
      Port: 8080
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AglWebLb8080Tg

  # Launch Template for Web EC2 Instances
  AglWebLt:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
      - AglAppLb
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref AglWebInstanceType
        KeyName: !Ref AglInstanceKey
        # SecurityGroupIds:
        #   - !ImportValue AglWebSgId
        NetworkInterfaces:
          - DeviceIndex: '0'
            AssociatePublicIpAddress: true
            SubnetId: !ImportValue AglPubNet1Id  # this will be overrided by ASG
            Groups:   # here override value in 'SecurityGroupIds'
              - !ImportValue AglWebSgId
        BlockDeviceMappings:    # Block device mapping (optional)
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 20
              VolumeType: gp2
        TagSpecifications:
          - ResourceType: instance  # Tags for the EC2 instance
            Tags:
              - Key: Name
                Value: AnyGroupLLC WebServer
        UserData:
          Fn::Base64:
            !Sub 
              - |
                #!/bin/bash
                yum -y update
                yum -y install httpd python3-pip
                systemctl enable httpd
                systemctl start httpd

                find /var/www -type d -exec chmod 2775 {} \;
                find /var/www -type f -exec chmod 0664 {} \;
                usermod -a -G apache ec2-user
                chown -R ec2-user:apache /var/www
                chmod 2775 /var/www

                # mkdir -p /home/ec2-user
                # chown -R ec2-user:ec2-user /home/ec2-user
                # print log
                # sudo cat /var/log/cloud-init-output.log

                # ------ 8080 service
                su - ec2-user -c 'curl -o /var/www/html/index.html https://raw.githubusercontent.com/sushenghua/IS735/refs/heads/main/v2/front_index.html'
                su - ec2-user -c 'pip3 install flask flask-cors requests'
                su - ec2-user -c 'pip3 uninstall urllib3'
                su - ec2-user -c 'pip3 install "urllib3<2"'

                echo 'lb dns: ${AglAppLbDNSName}'

                cat <<EOF > /home/ec2-user/frontend.py

                import requests
                import json
                from flask import Flask, request, jsonify
                from flask_cors import CORS
                import socket

                # Replace with the actual IP or hostname of your backend server
                backend_url = 'http://${AglAppLbDNSName}:8080/api/value'

                app = Flask(__name__)
                CORS(app)

                @app.route('/api/value', methods=['POST'])
                def get_value():
                    try:
                        # log data from the incoming request
                        data = request.json
                        # print(f"Received data: {data}")

                        # Forward the POST request to the backend with the same JSON data
                        response = requests.post(backend_url, json=data)

                        # Check if the backend request was successful (status 200)
                        if response.status_code == 200:
                            # Parse the JSON response from the backend
                            backend_data = response.json()

                            # log data
                            # print(f"Backend response: {backend_data}")

                            # Return the backend response as a JSON response to the original client
                            backend_data['frontendhost'] = socket.gethostname()
                            response = jsonify(backend_data)
                            response.headers.add('Access-Control-Allow-Origin', '*')
                            return response, 200

                        else:
                            # Log the backend's response if it failed
                            print(f"Failed with status code {response.status_code}: {response.text}")
                            return jsonify({'error': 'Failed to retrieve data from backend', 'details': response.text}), response.status_code

                    except requests.exceptions.RequestException as e:
                        # Log and return an error if the request to the backend fails
                        print(f"Error while making request: {e}")
                        return jsonify({'error': 'Request to backend failed', 'details': str(e)}), 500

                    except Exception as e:
                        # Catch any other exceptions and return a 500 error
                        print(f"Unexpected error: {e}")
                        return jsonify({'error': str(e)}), 500

                @app.route('/api/health', methods=['GET'])
                def health_check():
                    return jsonify({'status': 'healthy'}), 200

                if __name__ == '__main__':
                    app.run(host='0.0.0.0', port=8080)
                EOF

                chown ec2-user:ec2-user /home/ec2-user/frontend.py
                chmod 755 /home/ec2-user/frontend.py
                su - ec2-user -c 'python3 /home/ec2-user/frontend.py &'
              - AglAppLbDNSName: !GetAtt AglAppLb.DNSName

  # SNS Topic for web Auto Scaling notifications
  AglWebAsSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Web Auto Scaling Notification Topic

  # Auto Scaling Group for web
  AglWebAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !ImportValue AglPubNet1Id
        - !ImportValue AglPubNet2Id
      LaunchTemplate:
        LaunchTemplateId: !Ref AglWebLt
        Version: !GetAtt AglWebLt.LatestVersionNumber
      TargetGroupARNs:
        - !Ref AglWebLbTg
        - !Ref AglWebLb8080Tg
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      NotificationConfigurations:
        - TopicARN: !Ref AglWebAsSNSTopic
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR


  # Auto Scaling Policies for Scaling In/Out
  AglWebScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AglWebAsg
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 1
      AdjustmentType: ChangeInCapacity
      Cooldown: 300

  AglWebScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AglWebAsg
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -1
      AdjustmentType: ChangeInCapacity
      Cooldown: 300

  # CloudWatch Alarm for Scale Out (high CPU)
  AglWebHighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU > 60% for 5 minutes"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 60
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AglWebScaleOutPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AglWebAsg

  # CloudWatch Alarm for Scale In (low CPU)
  AglWebLowCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU < 20% for 5 minutes"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 20
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref AglWebScaleInPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AglWebAsg

#--------------------------------------------------------------------------------
#------ auto scaling and load balancer for AnyGroupLLC backend app

  # App Load Balancer
  AglAppLb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !ImportValue AglPriNet1Id
        - !ImportValue AglPriNet2Id
      SecurityGroups:
        - !ImportValue AglAppLbSgId
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: AnyGroupLLC App LoadBalancer

  # Target Group for the App Load Balancer
  AglAppLbTg:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue AglVpcId
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /api/health
      HealthCheckIntervalSeconds: 30

  # Listener for the App Load Balancer
  AglAppLbl:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AglAppLb
      Protocol: HTTP
      Port: 8080
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AglAppLbTg

  # Launch Template for Assignment App EC2 Instances
  AglAppLt:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref AglAppInstanceType
        KeyName: !Ref AglInstanceKey
        # SecurityGroupIds:
        #   - !ImportValue AglAppSgId
        NetworkInterfaces:
          - DeviceIndex: '0'
            AssociatePublicIpAddress: false
            SubnetId: !ImportValue AglPriNet1Id  # this will be overrided by ASG
            Groups:   # here override value in 'SecurityGroupIds'
              - !ImportValue AglAppSgId
        BlockDeviceMappings:    # Block device mapping (optional)
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 20
              VolumeType: gp2
        TagSpecifications:
          - ResourceType: instance  # Tags for the EC2 instance
            Tags:
              - Key: Name
                Value: AnyGroupLLC AppServer
        UserData:
          Fn::Base64:
            !Sub
              - |
                #!/bin/bash

                systemctl enable amazon-ssm-agent
                systemctl start amazon-ssm-agent

                yum -y install wget nmap 
                yum -y install python3-pip
                pip3 install flask redis mysql-connector-python

                # Configure MySQL and Redis setup
                cat <<EOF > /home/ec2-user/setup.py
                import mysql.connector
                import redis

                # MySQL connection
                db = mysql.connector.connect(
                    host='${dbhost}',
                    user='admin',
                    password='${dbpass}',
                )

                # Create database and table if not exists
                cursor = db.cursor()
                cursor.execute("CREATE DATABASE IF NOT EXISTS testdb")
                cursor.execute("USE testdb")
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS test_table (
                        key VARCHAR(255) PRIMARY KEY,
                        value VARCHAR(255)
                    )
                """)
                cursor.execute("INSERT INTO test_table (key, value) VALUES ('name', 'AnyGroupLLC from RDS') ON DUPLICATE KEY UPDATE value='AnyGroupLLC from RDS'")
                db.commit()
                cursor.close()
                db.close()

                # Redis connection
                redis_client = redis.Redis(
                    host='${redishost}',  # Replace with your Redis endpoint
                    port=6379,
                    db=0
                )
                # Insert key-value pair into Redis
                redis_client.set('name', 'AnyGroupLLC from RedisCache')

                print("Database and Redis setup completed.")
                EOF

                # Run the setup script
                python3 /home/ec2-user/setup.py

                # Write the Flask app for the backend
                cat <<EOF > /home/ec2-user/backend.py
                import requests
                import socket
                from flask import Flask, request, jsonify
                # import redis
                # import mysql.connector

                app = Flask(__name__)

                db = mysql.connector.connect(
                    host='${dbhost}',
                    user='admin',
                    password='${dbpass}',
                )
                redis_client = redis.Redis(
                    host='${redishost}',
                    port=6379,
                    db=0
                )

                @app.route('/api/value', methods=['POST'])
                def get_value():
                    try:
                        data = request.json
                        source = data.get('source', 'database')
                        # print("request received")
                        hostname = socket.gethostname()

                        if source == 'cache':
                            response = {'backendhost': hostname, 'value': 'In cache'}
                            #return jsonify(response), 200
                            value = redis_client.get('name')
                            if value is None:
                                return jsonify({'error': 'Value not found in cache'}), 404
                            response['value-source'] = 'cache'
                            response['value'] = value
                            return jsonify(response), 200

                        elif source == 'database':
                            response = {'backendhost': hostname, 'value': 'In database'}
                            #return jsonify(response), 200
                            cursor = db.cursor()
                            cursor.execute('SELECT value FROM test_table WHERE key=%s', ('name',))
                            result = cursor.fetchone()
                            cursor.close()
                            if result:
                                response['value-source'] = 'database'
                                response['value'] = result[0]
                                return jsonify(response), 200
                            else:
                                return jsonify({'error': 'Value not found in database'}), 404

                        else:
                            return jsonify({'error': 'Invalid source'}), 400

                    except Exception as e:
                        return jsonify({'error': str(e)}), 500

                @app.route('/api/health', methods=['GET'])
                def health_check():
                    return jsonify({'status': 'healthy'}), 200

                if __name__ == '__main__':
                    app.run(host='0.0.0.0', port=8080)
                EOF

                python3 /home/ec2-user/backend.py &
              - dbhost: !ImportValue AglDbEndpoint
                dbpass: !ImportValue AglVpcId
                redishost: !ImportValue AglElastiCachePrimaryEndpoint

  # SNS Topic for app Auto Scaling notifications
  AglAppAsSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: App Auto Scaling Notification Topic

  # Auto Scaling Group for app
  AglAppAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !ImportValue AglPriNet1Id
        - !ImportValue AglPriNet2Id
      LaunchTemplate:
        LaunchTemplateId: !Ref AglAppLt
        Version: !GetAtt AglAppLt.LatestVersionNumber
      TargetGroupARNs:
        - !Ref AglAppLbTg
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      NotificationConfigurations:
        - TopicARN: !Ref AglAppAsSNSTopic
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR

  # Auto Scaling Policies for Scaling In/Out
  AglAppScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AglAppAsg
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 1
      AdjustmentType: ChangeInCapacity
      Cooldown: 300

  AglAppScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AglAppAsg
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -1
      AdjustmentType: ChangeInCapacity
      Cooldown: 300

  # CloudWatch Alarm for Scale Out (high CPU)
  AglAppHighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU > 60% for 5 minutes"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 60
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AglAppScaleOutPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AglAppAsg

  # CloudWatch Alarm for Scale In (low CPU)
  AglAppLowCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU < 20% for 5 minutes"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 20
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref AglAppScaleInPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AglAppAsg
