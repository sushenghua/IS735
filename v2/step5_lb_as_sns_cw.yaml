AWSTemplateFormatVersion: 2010-09-09
Description: 'Step 5: create Load Balancer, Auto Scaling, SNS, and CloudWatch'

#################################################################################
### Conditions
#################################################################################
Conditions:
  InUsEast1: !Equals
    - !Ref 'AWS::Region'
    - us-east-1

#################################################################################
### Parameters
#################################################################################
Parameters:

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  AglWebInstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small
    Description: Web EC2 instance type

  AglAppInstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small
    Description: App EC2 instance type

  AglInstanceKey:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Default: vockey

#################################################################################
### Resources
#################################################################################
Resources:

#--------------------------------------------------------------------------------
#------ auto scaling and load balancer for AnyGroupLLC frontend web

  # Web Load Balancer
  AglWebLb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !ImportValue AglPubNet1Id
        - !ImportValue AglPubNet2Id
      SecurityGroups:
        - !ImportValue AglWebLbSgId
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: AnyGroupLLC Web LoadBalancer

  # Target Group for the Web Load Balancer: port 80
  AglWebLbTg:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue AglVpcId
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30

  # Target Group for the Web Load Balancer: port 8080
  AglWebLb8080Tg:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue AglVpcId
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /api/health
      HealthCheckIntervalSeconds: 30

  # Listener 80 for the Web Load Balancer
  AglWebLbl:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AglWebLb
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AglWebLbTg

  # Listener 8080 for the Web Load Balancer
  AglWebLbl8080:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AglWebLb
      Protocol: HTTP
      Port: 8080
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AglWebLb8080Tg

  # Launch Template for Web EC2 Instances
  AglWebLt:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
      - AglAppLb
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref AglWebInstanceType
        KeyName: !Ref AglInstanceKey
        # SecurityGroupIds:
        #   - !ImportValue AglWebSgId
        NetworkInterfaces:
          - DeviceIndex: '0'
            AssociatePublicIpAddress: true
            SubnetId: !ImportValue AglPubNet1Id  # this will be overrided by ASG
            Groups:   # here override value in 'SecurityGroupIds'
              - !ImportValue AglWebSgId
        BlockDeviceMappings:    # Block device mapping (optional)
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 20
              VolumeType: gp2
        TagSpecifications:
          - ResourceType: instance  # Tags for the EC2 instance
            Tags:
              - Key: Name
                Value: AnyGroupLLC WebServer
        UserData:
          Fn::Base64:
            !Sub 
              - |
                #!/bin/bash
                yum -y update
                yum -y install httpd python3-pip

                # web service
                systemctl enable httpd
                systemctl start httpd

                # setup web environment
                find /var/www -type d -exec chmod 2775 {} \;
                find /var/www -type f -exec chmod 0664 {} \;
                usermod -a -G apache ec2-user
                chown -R ec2-user:apache /var/www
                chmod 2775 /var/www

                # install python packages
                su - ec2-user -c 'pip3 install flask flask-cors requests'
                su - ec2-user -c 'pip3 uninstall urllib3'
                su - ec2-user -c 'pip3 install "urllib3<2"'
                sleep 3

                # create config.py for backend params
                cat <<EOF > /home/ec2-user/config.py
                backend_url='http://${AglAppLbDNSName}:8080/api/value'
                EOF
                sleep 3

                # download html, frontend.py
                su - ec2-user -c 'curl -o /var/www/html/index.html https://raw.githubusercontent.com/sushenghua/IS735/refs/heads/main/v2/front_index.html'
                su - ec2-user -c 'curl -o /home/ec2-user/frontend.py https://raw.githubusercontent.com/sushenghua/IS735/refs/heads/main/v2/frontend.py'

                # run frontend service script
                chown -R ec2-user:apache /home/ec2-user/*.py
                chmod 755 /home/ec2-user/*.py
                su - ec2-user -c 'python3 /home/ec2-user/frontend.py &'
              - AglAppLbDNSName: !GetAtt AglAppLb.DNSName

  # SNS Topic for web Auto Scaling notifications
  AglWebAsSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Web Auto Scaling Notification Topic

  # Auto Scaling Group for web
  AglWebAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !ImportValue AglPubNet1Id
        - !ImportValue AglPubNet2Id
      LaunchTemplate:
        LaunchTemplateId: !Ref AglWebLt
        Version: !GetAtt AglWebLt.LatestVersionNumber
      TargetGroupARNs:
        - !Ref AglWebLbTg
        - !Ref AglWebLb8080Tg
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      NotificationConfigurations:
        - TopicARN: !Ref AglWebAsSNSTopic
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR


  # Auto Scaling Policies for Scaling In/Out
  AglWebScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AglWebAsg
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 1
      AdjustmentType: ChangeInCapacity
      Cooldown: 300

  AglWebScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AglWebAsg
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -1
      AdjustmentType: ChangeInCapacity
      Cooldown: 300

  # CloudWatch Alarm for Scale Out (high CPU)
  AglWebHighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU > 60% for 5 minutes"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 60
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AglWebScaleOutPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AglWebAsg

  # CloudWatch Alarm for Scale In (low CPU)
  AglWebLowCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU < 20% for 5 minutes"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 20
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref AglWebScaleInPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AglWebAsg

#--------------------------------------------------------------------------------
#------ auto scaling and load balancer for AnyGroupLLC backend app

  # App Load Balancer
  AglAppLb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !ImportValue AglPriNet1Id
        - !ImportValue AglPriNet2Id
      SecurityGroups:
        - !ImportValue AglAppLbSgId
      Scheme: internal
      Tags:
        - Key: Name
          Value: AnyGroupLLC App LoadBalancer

  # Target Group for the App Load Balancer
  AglAppLbTg:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue AglVpcId
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /api/health
      HealthCheckIntervalSeconds: 30

  # Listener for the App Load Balancer
  AglAppLbl:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AglAppLb
      Protocol: HTTP
      Port: 8080
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AglAppLbTg

  # Launch Template for Assignment App EC2 Instances
  AglAppLt:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref AglAppInstanceType
        KeyName: !Ref AglInstanceKey
        # SecurityGroupIds:
        #   - !ImportValue AglAppSgId
        NetworkInterfaces:
          - DeviceIndex: '0'
            AssociatePublicIpAddress: false
            SubnetId: !ImportValue AglPriNet1Id  # this will be overrided by ASG
            Groups:   # here override value in 'SecurityGroupIds'
              - !ImportValue AglAppSgId
        BlockDeviceMappings:    # Block device mapping (optional)
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 20
              VolumeType: gp2
        TagSpecifications:
          - ResourceType: instance  # Tags for the EC2 instance
            Tags:
              - Key: Name
                Value: AnyGroupLLC AppServer
        UserData:
          Fn::Base64:
            !Sub
              - |
                #!/bin/bash
                yum -y update
                yum -y install python3-pip

                # sudo cat /var/log/cloud-init-output.log

                # install python packages
                su - ec2-user -c 'pip3 install flask flask-cors requests redis mysql-connector-python'
                su - ec2-user -c 'pip3 uninstall urllib3'
                su - ec2-user -c 'pip3 install "urllib3<2"'
                sleep 3

                # create config.py for database and cache parameters
                cat <<EOF > /home/ec2-user/config.py
                dbhost='${databaseHost}'
                dbuser='admin'
                dbpass='${databasePass}'
                dbname='testdb'
                redishost='${redisCacheHost}'
                EOF
                sleep 3

                # download backend script
                su - ec2-user -c 'curl -o /home/ec2-user/setup.py https://raw.githubusercontent.com/sushenghua/IS735/refs/heads/main/v2/backend_setup.py'
                su - ec2-user -c 'curl -o /home/ec2-user/backend.py https://raw.githubusercontent.com/sushenghua/IS735/refs/heads/main/v2/backend.py'

                # run setup script then backend service script
                chown -R ec2-user:apache /home/ec2-user/*.py
                chmod 755 /home/ec2-user/*.py
                su - ec2-user -c 'python3 /home/ec2-user/setup.py'
                sleep 3
                su - ec2-user -c 'python3 /home/ec2-user/backend.py &'
              - databaseHost: !ImportValue AglDbEndpoint
                databasePass: !ImportValue AglVpcId
                redisCacheHost: !ImportValue AglElastiCachePrimaryEndpoint

  # SNS Topic for app Auto Scaling notifications
  AglAppAsSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: App Auto Scaling Notification Topic

  # Auto Scaling Group for app
  AglAppAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !ImportValue AglPriNet1Id
        - !ImportValue AglPriNet2Id
      LaunchTemplate:
        LaunchTemplateId: !Ref AglAppLt
        Version: !GetAtt AglAppLt.LatestVersionNumber
      TargetGroupARNs:
        - !Ref AglAppLbTg
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      NotificationConfigurations:
        - TopicARN: !Ref AglAppAsSNSTopic
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR

  # Auto Scaling Policies for Scaling In/Out
  AglAppScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AglAppAsg
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 1
      AdjustmentType: ChangeInCapacity
      Cooldown: 300

  AglAppScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AglAppAsg
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -1
      AdjustmentType: ChangeInCapacity
      Cooldown: 300

  # CloudWatch Alarm for Scale Out (high CPU)
  AglAppHighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU > 60% for 5 minutes"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 60
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AglAppScaleOutPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AglAppAsg

  # CloudWatch Alarm for Scale In (low CPU)
  AglAppLowCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU < 20% for 5 minutes"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 20
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref AglAppScaleInPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AglAppAsg
