AWSTemplateFormatVersion: 2010-09-09
Description: 'Test backend instance'

#################################################################################
### Conditions
#################################################################################
Conditions:
  InUsEast1: !Equals
    - !Ref 'AWS::Region'
    - us-east-1

#################################################################################
### Parameters
#################################################################################
Parameters:

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  AglWebInstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small
    Description: Web EC2 instance type

  AglAppInstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small
    Description: App EC2 instance type

  AglInstanceKey:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Default: vockey

#################################################################################
### Resources
#################################################################################
Resources:

  TestEC2:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: true
          SubnetId: !ImportValue AglPriNet1Id
          GroupSet:
            - !ImportValue AglAppSgId
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: TestEC2Backend
      KeyName: vockey                
      UserData:
        Fn::Base64:
          !Sub 
            - |
              #!/bin/bash
              yum -y update
              yum -y install python3-pip

              # sudo cat /var/log/cloud-init-output.log

              # install python packages
              su - ec2-user -c 'pip3 install flask flask-cors requests redis mysql-connector-python'
              su - ec2-user -c 'pip3 uninstall urllib3'
              su - ec2-user -c 'pip3 install "urllib3<2"'
              sleep 3

              # create config.py for database and cache parameters
              cat <<EOF > /home/ec2-user/config.py
              dbhost='${databaseHost}'
              dbuser='admin'
              dbpass='${databasePass}'
              dbname='testdb'
              redishost='${redisCacheHost}'
              EOF
              sleep 3

              # download backend script
              su - ec2-user -c 'curl -o /home/ec2-user/setup.py https://raw.githubusercontent.com/sushenghua/IS735/refs/heads/main/v2/backend_setup.py'
              su - ec2-user -c 'curl -o /home/ec2-user/backend.py https://raw.githubusercontent.com/sushenghua/IS735/refs/heads/main/v2/backend.py'

              # run setup script then backend service script
              chmod 755 /home/ec2-user/*.py
              su - ec2-user -c 'python3 /home/ec2-user/setup.py'
              sleep 3
              su - ec2-user -c 'python3 /home/ec2-user/backend.py &'

            - databaseHost: !ImportValue AglDbEndpoint
              databasePass: !ImportValue AglVpcId
              redisCacheHost: !ImportValue AglElastiCachePrimaryEndpoint
          
